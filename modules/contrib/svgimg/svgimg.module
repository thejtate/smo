<?php
/*
* This is the main module file
*/

/*
* Path within file directory to PNG rendering callback subdirectory
*/
define('SVGIMG_PNG_PATH','svgimg');

/*
* Define default size for PNG alternatives where none can be read from source XML
*/
define('SVGIMG_DEFAULT_SIZE', '1024x800');

function svgimg_menu() {
  $items = array();
  $path = svgimg_path();
  
  $items[$path . '/%'] = array(
     'title' => 'SVG PNG render',
     'description' => 'Configure Metatag defaults.',
     'page callback' => 'svgimg_render',
     'access callback' => TRUE,
     'file' => 'svgimg.render.inc',
   );
   
   $items['admin/config/media/svg-img'] = array(
     'title' => 'SVG Images',
     'description' => 'Configure SVG Image Conversion options.',
     'type' => MENU_NORMAL_ITEM,
     'page callback' => 'drupal_get_form',
     'page arguments' => array('svgimg_admin'),
     'access arguments' => array('administer site configuration'),
     'file' => 'svgimg.admin.inc',
   );
  
  return $items;
}

/*
* implements hook_field_attach_view_alter
*/
function svgimg_field_attach_view_alter(&$output, $context) {
  foreach ($output as $field_name => &$field_data) {

    if (is_array($field_data) && isset($field_data['#field_type']) && is_array($field_data['#items']) ) {
      switch ($field_data['#field_type']) {
        case 'image':
        case 'file':
          $count = count($field_data['#items']);
          if ($count > 0) {
            module_load_include('inc', 'svgimg');
            svgimg_image_svg_loop_items($field_data,$count);
          }
          break;    
      }
    }
  }
}

/*
 * Implements hook_field_formatter_info()
 */
function svgimg_field_formatter_info() {
  return array(
    'svgimg' => array(
        'label' => t('Inline SVG'),
        'field types' => array('image','file'),
        'settings' => array(
          'wrapper_tag' => 'figure',
          'classes' => NULL,
          'add_script' => NULL,
        ),
    ),
  );
}

/*
 * Implements hook_field_formatter_settings_summary()
*/
function svgimg_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = '';
  $display = $instance['display'][$view_mode];
  switch ($display['type']) {
    case 'svgimg': 
      module_load_include('inc', 'svgimg','svgimg.admin');
      $summary = _svgimg_field_formatter_settings_summary($field, $instance, $view_mode,$display);
      break;
  }
  return $summary;
}

/*
 * Implements hook_field_formatter_settings_form()
*/
function svgimg_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $element = array();
  switch ($display['type']) {
    case 'svgimg': 
      module_load_include('inc', 'svgimg','svgimg.admin');
      $element = _svgimg_field_formatter_settings_form($field, $display,$form, $form_state);
      break;
  }
  return $element;
}

/*
 * Implements hook_field_formatter_view()
*/
function svgimg_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'svgimg':
      if (!empty($items) && is_array($items)) {
        module_load_include('inc', 'svgimg');
        $element = svgimg_build_element($items,$display);
      }
      break;
  }
  return $element;
}

/*
* Implements hook_theme_registry_alter
* Provide custom media thumbnail for SVG images
*/
function svgimg_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['media_thumbnail']['function'])) {
    
    $theme_path = drupal_get_path('module', 'svgimg');
    $file_path = $theme_path . '/svgimg.theme.inc';
    if (isset($theme_registry['media_thumbnail'])) {
      $theme_registry['media_thumbnail']['function'] = 'svgimg_theme_media_thumbnail';
      $theme_registry['media_thumbnail']['file'] = $file_path;
      $theme_registry['media_thumbnail']['theme_path'] = $theme_path;
      $theme_registry['media_thumbnail']['includes'] = array($file_path);
    }
    $theme_registry['image_widget']['function'] = 'svgimg_theme_image_widget';
    $theme_registry['image_widget']['file'] = $file_path;
    $theme_registry['image_widget']['theme_path'] = $theme_path;
    $theme_registry['image_widget']['includes'] = array($file_path);
  }
}

/*
* Fetch path to directory for PNG alternatives
*/
function svgimg_path() {
  return variable_get('file_public_path', conf_path() . '/files') . '/' . SVGIMG_PNG_PATH;
}

/*
* Implements hook_field_widget_form_alter
*/
function svgimg_field_widget_form_alter(&$element, &$form_state, $context) {
  $indexed = isset($element[0]);
  $type = NULL;
  if ($indexed) {
    if (isset($element[0]['#type'])) {
      $type = $element[0]['#type'];
    }
  }
  else {
    if (isset($element['#type'])) {
      $type = $element['#type'];
    }
  }
  if ($type == 'managed_file') {
    if ($indexed) {
      $num_elements = count($element);
      foreach ($element as $key => &$subelement) {
        if (is_numeric($key) && is_array($subelement) && isset($subelement['#type'])) {
          _svgimg_assign_extensions($subelement,$context);
        }
      }
    }
    else {
      _svgimg_assign_extensions($element,$context);
    }
  }
}

/*
* @param array &$element
* @param array &$context
*/
function _svgimg_assign_extensions(&$element, &$context) {
  if (isset($context['instance']['settings']['file_extensions'])) {
    $extensions = $context['instance']['settings']['file_extensions'];
    if (preg_match('#\bsvg\b#i', $extensions)) {
      $element['#upload_validators']['file_validate_extensions'] = array($extensions);
      $description_parts = explode('<strong>', $element['#description']);
      $num_description_parts = count($description_parts);
      if ($num_description_parts >= 2) {
        $last_index = $num_description_parts - 1;
        $description_parts[$last_index] = $extensions . '</strong>';
        
        $element['#description'] = implode('<strong>', $description_parts);
      }
    }
  }
}

/*
* Implement hook_field_attach_presave
*/
function svgimg_field_attach_presave($entity_type, $entity) {
  if ($entity_type == 'file' && is_object($entity) && isset($entity->filemime)) {
    if ($entity->filemime == 'image/svg+xml') {
      module_load_include('inc', 'svgimg');
      $size = svgimg_fetch_size($entity->uri);
      $dimensions = array('width','height');
      foreach ($dimensions as $dim) {
        $entity->metadata[$dim] = $size[$dim];
        $entity->{$dim} = $size[$dim];
      }
    }
  }
  else {
    $bundle = _svgimg_entity_get_bundle($entity, $entity_type);
    $info = field_info_instances($entity_type,$bundle);
    if (is_array($info)) {
      foreach ($info as $field_name => $field_data) {
        switch ($field_data['widget']['module']) {
          case 'image':
          case 'media':
             module_load_include('inc', 'svgimg');
             _svgimg_loop_entity_field_items($entity,$field_name);
          break;
        }
      }
    }
  }
}

/*
* Fetch bundle from an entity of any type
* @param object $entity
* @param string $entity_type
*/
function _svgimg_entity_get_bundle($entity, $entity_type) {
  $info = entity_get_info($entity_type);
  if (empty($info['entity keys']['bundle'])) {
    return $entity_type;
  }
  else {
    return $entity->{$info['entity keys']['bundle']};
  }
}
